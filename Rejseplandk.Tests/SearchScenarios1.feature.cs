// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Rejseplandk.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SearchScenarios")]
    public partial class SearchScenariosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SearchScenarios.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SearchScenarios", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add two numbers")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("POI", "Telefon nr", "Fremtid", "Ankomst", "Enkelt", null)]
        [NUnit.Framework.TestCaseAttribute("POI", "POI", "I dag", "Afgang", "Retur", null)]
        [NUnit.Framework.TestCaseAttribute("Telefon nr", "POI", "Fremtid", "Afgang", "Enkelt", null)]
        [NUnit.Framework.TestCaseAttribute("Street", "Street", "Fremtid", "Ankomst", "Retur", null)]
        [NUnit.Framework.TestCaseAttribute("Street", "Telefon nr", "I dag", "Afgang", "Enkelt", null)]
        [NUnit.Framework.TestCaseAttribute("Station", "POI", "I dag", "Ankomst", "Enkelt", null)]
        [NUnit.Framework.TestCaseAttribute("Telefon nr", "Street", "I dag", "Afgang", "Enkelt", null)]
        [NUnit.Framework.TestCaseAttribute("Telefon nr", "Station", "I dag", "Ankomst", "Retur", null)]
        [NUnit.Framework.TestCaseAttribute("Telefon nr", "Telefon nr", "I dag", "Ankomst", "Retur", null)]
        [NUnit.Framework.TestCaseAttribute("Station", "Station", "Fremtid", "Afgang", "Enkelt", null)]
        [NUnit.Framework.TestCaseAttribute("Station", "Street", "Fremtid", "Ankomst", "Retur", null)]
        [NUnit.Framework.TestCaseAttribute("Street", "POI", "I dag", "Ankomst", "Enkelt", null)]
        [NUnit.Framework.TestCaseAttribute("POI", "Station", "I dag", "Afgang", "Retur", null)]
        [NUnit.Framework.TestCaseAttribute("Street", "Station", "I dag", "Afgang", "Enkelt", null)]
        [NUnit.Framework.TestCaseAttribute("POI", "Street", "I dag", "Afgang", "Retur", null)]
        [NUnit.Framework.TestCaseAttribute("Station", "Telefon nr", "I dag", "Ankomst", "Retur", null)]
        public virtual void AddTwoNumbers(string to, string from, string dato, string travelType, string travel, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers", @__tags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("I am on the frontpage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("I fill search: \'<from>\' and \'<to>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.And(string.Format("I pick a date \'{0}\'", dato), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And(string.Format("I choose traveltype \'{0}\'", travelType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And(string.Format("I pick return \'{0}\'", travel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("I get at least 3 travelplan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.And("take a screenshoot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
